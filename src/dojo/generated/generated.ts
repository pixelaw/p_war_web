/* Autogenerated file. Do not edit manually. */

import {Account, AccountInterface, BigNumberish} from "starknet";
import { DojoProvider } from "@dojoengine/core";
export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export interface VoteProps {
  account: Account | AccountInterface,
  gameId: number,
  index: number,
  usePx: number,
  isInFavor: boolean
}

export enum ProposalType {
  Unknown,
  ToggleAllowedApp,
  ToggleAllowedColor,
  ChangeGameDuration,
  ChangePixelRecovery,
  ExpandArea,
  BanPlayerAddress,
  ChangeMaxPXConfig,
  ChangeWinnerConfig,
  ChangePaintCost,
  MakeADisaster
}

export interface CreateProposalProps {
  account: Account | AccountInterface,
  gameId: number,
  proposalType: ProposalType,
  args: BigNumberish[]
}

export async function setupWorld(provider: DojoProvider) {
  function actions() {
    const vote = async (
      { account, gameId, index, usePx, isInFavor }:
        VoteProps
    ) => {
      try {
        return await provider.execute(account, {
          contractName: "voting",
          entrypoint: "vote",
          calldata: [gameId, index, usePx, isInFavor],
        });
      } catch (error) {
        console.error("Error executing vote:", error);
        throw error;
      }
    };

    const createProposal = async ({ account, gameId, proposalType, args }: CreateProposalProps) => {
      try {
        return await provider.execute(account, {
          contractName: "propose",
          entrypoint: "create_proposal",
          calldata: [gameId, proposalType, args.length, ...args],
        });
      } catch (error) {
        console.error("Error executing createProposal:", error);
        throw error;
      }
    };
    return { vote, createProposal };
  }
  return {
    actions: actions(),
  };
}